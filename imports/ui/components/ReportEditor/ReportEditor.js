/* eslint-disable max-len, no-return-assign */

import React from 'react';
import PropTypes from 'prop-types';
import { ButtonGroup, Button, Panel } from 'react-bootstrap';
import { Meteor } from 'meteor/meteor';
import { Bert } from 'meteor/themeteorchef:bert';
import validate from '../../../modules/validate';
import { FormSelectMultiple, getSelectedObjects } from '../../componentElements/FormSelectMultiple/FormSelectMultiple';
import { FormSelectSingle, getSelectedObject } from '../../componentElements/FormSelectSingle/FormSelectSingle';
import FormTextInput from '../../componentElements/FormTextInput/FormTextInput';
import FormTextArea from '../../componentElements/FormTextArea/FormTextArea';
import { ReportOutputOutcomeEditor, populateExisting } from '../ReportOutputOutcomeEditor/ReportOutputOutcomeEditor';
import { getFormElementsWithNewButton, scrubObject } from '../../../modules/get-form-elements'

class ReportEditor extends React.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
    this.handleNew = this.handleNew.bind(this);
    this.handleRemove = this.handleRemove.bind(this);
    this.state = {
      program_array: [],
      new_output_index: 0,
      new_output_array: [],
      new_outcome_index: 0,
      new_outcome_array: [],
    }
    const rept = this.props.rept
    if(rept && (rept.type == 'program' ) && rept.charity_id ){
      selectedCharity = this.props.chtys.find((obj) => obj._id == rept.charity_id);
      this.state.program_array = selectedCharity && selectedCharity.programs;
    }

  }

  componentDidMount() {
    const component = this;
    validate(component.form, {
      rules: {
        service_ids: {
          required: true,
        },
        country_id: {
          valueNotEquals: undefined,
          required: true,
        },
        target_group_ids: {
          required: true,
        },
        detail_level_id: {
          valueNotEquals: undefined,
          required: true,
        },
        type:{
          required: true,
        },
        charity_id:{
          valueNotEquals: undefined,
          required: true,
        },
        description:{
          required: true,
        },
      },
      messages: {
        service_ids: {
          required: 'Please select the appropriate service tag(s)',
        },
        country_id: {
          required: 'Please select one country tag',
        },
        target_group_ids: {
          required: 'Please select the appropriate target group tag(s)',
        },
        detail_level_id: {
          required: 'Please select one detail level tag',
        },
        type:{
          required: 'Please select a type of report',
        },
        charity_id:{
          required: 'Please select a type of charity',
        },
        description:{
          required: 'Please enter a short description',
        },
      },
      submitHandler() { component.handleSubmit(); },
    });
  }

  handleSubmit() {
    const { history, svcs, ctrys, t_grps, d_levels, chtys } = this.props;
    const { service_ids, country_id, type, charity_id, program_id, description, completed, data_collection, continuous_improvement, impact_framework, commentary, outcome_quotes } = this.form;
    const existingReport = this.props.rept && this.props.rept._id;
    const methodToCall = existingReport ? 'reports.update' : 'reports.insert';

    let rept = {
      service_ids: getSelectedObjects(service_ids, svcs),
      country_id: getSelectedObject(country_id, ctrys),
      target_group_ids: getSelectedObjects(target_group_ids, t_grps),
      detail_level_id: getSelectedObject(detail_level_id, d_levels),
      type: (type.value=='Select')? undefined : type.value,
      charity_id: (charity_id.value=='Select')? undefined : charity_id.value,
      program_id: program_id && ((program_id.value=='Select')? undefined : program_id.value),
      description: description.value.trim(),
      completed: completed.checked,
      impact_info: {},
    };

    // get form elements for fields generated by outputs and outcomes
    const outputs = getFormElementsWithNewButton("output", { number: "number", description: "string" } , this.form);
    const outcomes = getFormElementsWithNewButton("outcome", { number: "number", description: "string" } , this.form);

    rept.impact_info = {
      data_collection: data_collection.value.trim(),
      continuous_improvement: continuous_improvement.value.trim(),
      impact_framework: impact_framework.value.trim(),
      commentary: commentary.value.trim(),
      outcome_quotes: outcome_quotes.value.trim(),
      outputs: outputs.length ? outputs : undefined,
      outcomes: outcomes.length ? outcomes : undefined,
    }

    scrubObject(rept.impact_info);
    if(_.isEmpty(rept.impact_info)){rept.impact_info = undefined};
    scrubObject(rept);

    if (existingReport) rept._id = existingReport;
    Meteor.call(methodToCall, rept, (error, reportId) => {
      if (error) {
        Bert.alert(error.reason, 'danger');
      } else {
        const confirmation = existingReport ? 'Report updated!' : 'Report added!';
        this.form.reset();
        Bert.alert(confirmation, 'success');
        history.push(`/admin/reports/${reportId}`);
      }
    });
  }

  handleChange() {
    if((this.form.type.value == 'program') && this.form.charity_id.value!='Select'){
      let nextState = this.state;
      selectedCharity = getSelectedObject(this.form.charity_id, this.props.chtys);
      nextState.program_array = selectedCharity && selectedCharity.programs;
      this.setState(nextState);
    } else{
      let nextState = this.state;
      nextState.program_array = [];
      this.setState(nextState);
      this.props.rept.program_id = undefined;
    }
  }

  handleNew(type){
    let nextState = this.state;
    const index = 'temp'+this.state[`new_${type}_index`];
    nextState[`new_${type}_index`] += 1;
    nextState[`new_${type}_array`].push(index);
    this.setState(nextState);
  }

  handleRemove(type, _id){
    let nextState = this.state;
    prefix = _id.substring(0,4);
    if(prefix=='temp'){
      nextState[`new_${type}_array`] = this.state[`new_${type}_array`].filter((element)=> element !== _id)
    }else{
      this.props.rept.impact_info[type+'s'] = this.props.rept.impact_info[type+'s'].filter((obj)=> obj._id !== _id)
    }
    this.setState(nextState);
  }

  render() {
    const { svcs, rept, ctrys, t_grps, d_levels, chtys } = this.props;
    let existingOutputs = rept && rept.impact_info && populateExisting(rept.impact_info.outputs, this.handleRemove, "output");
    let existingOutcomes = rept && rept.impact_info && populateExisting(rept.impact_info.outcomes, this.handleRemove, "outcome");
    return (<form ref={form => (this.form = form)} onSubmit={event => event.preventDefault()}>
      <FormSelectMultiple
        fieldName="service_ids"
        optionsList= {svcs}
        defaultVal = {rept && rept.service_ids && rept.service_ids[0]._id && rept.service_ids.map( ids => ids._id )} />

      <FormSelectSingle
        fieldName="country_id"
        optionsList= {ctrys}
        defaultVal = {rept && rept.country_id && rept.country_id._id} />

      <FormSelectMultiple
        fieldName="target_group_ids"
        optionsList= {t_grps}
        defaultVal = {rept && rept.target_group_ids && rept.target_group_ids[0]._id && rept.target_group_ids.map( ids => ids._id )} />

      <FormSelectSingle
        fieldName="detail_level_id"
        optionsList= {d_levels}
        defaultVal = {rept && rept.detail_level_id && rept.detail_level_id._id} />

      <FormSelectSingle
        fieldName="charity_id"
        optionsList= {chtys}
        defaultVal = {rept && rept.charity_id}
        handleChange = { this.handleChange }
      />

      <FormSelectSingle
        fieldName="type"
        optionsList= {["charity", "program"]}
        defaultVal = { rept && rept.type }
        handleChange = { this.handleChange }
      />

      {
        (this.state.program_array.length >0 )? (
          <FormSelectSingle
            fieldName="program_id"
            optionsList= { this.state.program_array }
            defaultVal = { rept && rept.program_id }
          />): ''
      }

      <FormTextArea fieldName="description" defaultVal={rept && rept.description} />

      <Panel collapsible header="impact_info">
        <FormTextArea fieldName="data_collection" defaultVal={rept && rept.impact_info && rept.impact_info.data_collection} />
        <FormTextArea fieldName="continuous_improvement" defaultVal={rept && rept.impact_info && rept.impact_info.continuous_improvement} />
        <FormTextArea fieldName="impact_framework" defaultVal={rept && rept.impact_info && rept.impact_info.impact_framework} />
        <FormTextArea fieldName="commentary" defaultVal={rept && rept.impact_info && rept.impact_info.commentary} />

        <Panel header="outputs">
          { existingOutputs }
          <ButtonGroup vertical block>
            <Button bsStyle="primary" onClick={() => this.handleNew('output')} >Add new output</Button>
          </ButtonGroup>
          {this.state.new_output_array.map((index) =>
            <ReportOutputOutcomeEditor
              key={index}
              _id={index}
              field= 'output'
              handleRemove={this.handleRemove}
            />)}
        </Panel>
        <Panel header="outcome">
          { existingOutcomes }
          <ButtonGroup vertical block>
            <Button bsStyle="primary" onClick={() => this.handleNew('outcome')} >Add new outcome</Button>
          </ButtonGroup>
          {this.state.new_outcome_array.map((index) =>
            <ReportOutputOutcomeEditor
              key={index}
              _id={index}
              field= 'outcome'
              handleRemove={this.handleRemove}
            />)}
          <FormTextArea fieldName="outcome_quotes" defaultVal={rept && rept.impact_info && rept.impact_info.outcome_quotes} />
        </Panel>
      </Panel>

      <FormTextInput
        type="checkbox"
        fieldName='completed'
        label='Completed ?'
        checked={rept && rept.completed} />

      <Button type="submit" bsStyle="success">
        {rept && rept._id ? 'Save Changes' : 'Add Report'}
      </Button>
    </form>);
  }
}

ReportEditor.defaultProps = {
  rept: { title: '', body: '' },
};

ReportEditor.propTypes = {
  history: PropTypes.object.isRequired,
  rept: PropTypes.object,
  svcs: PropTypes.arrayOf(PropTypes.object).isRequired,
  ctrys: PropTypes.arrayOf(PropTypes.object).isRequired,
  t_grps: PropTypes.arrayOf(PropTypes.object).isRequired,
  d_levels: PropTypes.arrayOf(PropTypes.object).isRequired,
  chtys: PropTypes.arrayOf(PropTypes.object).isRequired,
};

export default ReportEditor;
